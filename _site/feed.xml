<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="ru" /><updated>2025-08-01T18:41:42+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Georgij Boldyrev</title><subtitle>Personal portfolio of a bioinformatics student.
</subtitle><author><name>Georgij Boldyrev</name><email>potap4800@gmail.com</email></author><entry><title type="html">AI Captioner: Командная разработка конвейера для обработки данных</title><link href="http://0.0.0.0:4000/2025/04/26/ai-captioner.md%20" rel="alternate" type="text/html" title="AI Captioner: Командная разработка конвейера для обработки данных" /><published>2025-04-26T00:00:00+00:00</published><updated>2025-04-26T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2025/04/26/ai-captioner</id><content type="html" xml:base="http://0.0.0.0:4000/2025/04/26/ai-captioner.md%20"><![CDATA[В рамках командной работы (3 человека) был с нуля разработан полноценный автоматизированный конвейер (pipeline) для обработки полевых данных с фотографий. Проект решает проблему ручного переноса информации с рукописных этикеток, автоматизируя весь процесс от изображения до готового к анализу отчета.

### Архитектура и моя роль в проекте

Я отвечал за проектирование и реализацию архитектуры пользовательского взаимодействия и конвейера обработки данных. Моя зона ответственности включала разработку трех ключевых утилитарных модулей, которые обеспечили **удобство использования, модульность и качественную отчетность** всего решения.

**1. Модуль ввода пользователя (`usr_input_module.py`):**
*   **Задача:** Создание дружелюбного и надежного интерфейса командной строки (CLI).
*   **Решение:** Весь код, связанный с вводом-выводом, был вынесен в отдельный модуль. Такой подход (**разделение ответственности**) делает основную логику чище и позволяет в будущем легко заменить консольный интерфейс на графический. Реализована валидация ввода и интерактивные подсказки для пользователя.

**2. Модуль генерации отчета (`table_module.py`):**
*   **Задача:** Автоматическое создание структурированного и отформатированного Excel-отчета.
*   **Решение:** Использована библиотека `XlsxWriter` для генерации `.xlsx` файлов с нуля. Модуль инкапсулирует всю логику форматирования (ширина колонок, стили заголовков), предоставляя основной программе простой API для записи данных.

**3. Модуль извлечения метаданных (`exif_module.py`):**
*   **Задача:** Надежное извлечение даты съемки из EXIF-данных фотографий.
*   **Решение:** Использована библиотека `Pillow` для парсинга метаданных. Реализован поиск по нескольким стандартным тегам (`DateTimeOriginal`, `DateTimeDigitized`) и корректная обработка случаев отсутствия данных для обеспечения отказоустойчивости.

### Общий принцип работы конвейера

1.  **Пользовательский ввод:** Скрипт запускается и в интерактивном режиме помогает пользователю выбрать папку с данными.
2.  **Обработка:** Система автоматически перебирает все файлы, извлекая метаданные, распознавая текст через **Yandex Vision API**, корректируя его с помощью **YandexGPT API**.
3.  **Генерация отчета:** Все очищенные и структурированные данные записываются в готовый Excel-файл.

### Ключевые технологии:

Python, XlsxWriter, Pillow, Requests (Yandex API), Git (для совместной работы).]]></content><author><name>Georgij Boldyrev</name><email>potap4800@gmail.com</email></author><category term="Python" /><category term="Teamwork" /><category term="System Design" /><category term="API" /><category term="Computer Vision" /><category term="YandexGPT" /><category term="OCR" /><category term="Automation" /><summary type="html"><![CDATA[В рамках командной работы (3 человека) был с нуля разработан полноценный автоматизированный конвейер (pipeline) для обработки полевых данных с фотографий. Проект решает проблему ручного переноса информации с рукописных этикеток, автоматизируя весь процесс от изображения до готового к анализу отчета. ### Архитектура и моя роль в проекте Я отвечал за проектирование и реализацию архитектуры пользовательского взаимодействия и конвейера обработки данных. Моя зона ответственности включала разработку трех ключевых утилитарных модулей, которые обеспечили **удобство использования, модульность и качественную отчетность** всего решения. **1. Модуль ввода пользователя (`usr_input_module.py`):** * **Задача:** Создание дружелюбного и надежного интерфейса командной строки (CLI). * **Решение:** Весь код, связанный с вводом-выводом, был вынесен в отдельный модуль. Такой подход (**разделение ответственности**) делает основную логику чище и позволяет в будущем легко заменить консольный интерфейс на графический. Реализована валидация ввода и интерактивные подсказки для пользователя. **2. Модуль генерации отчета (`table_module.py`):** * **Задача:** Автоматическое создание структурированного и отформатированного Excel-отчета. * **Решение:** Использована библиотека `XlsxWriter` для генерации `.xlsx` файлов с нуля. Модуль инкапсулирует всю логику форматирования (ширина колонок, стили заголовков), предоставляя основной программе простой API для записи данных. **3. Модуль извлечения метаданных (`exif_module.py`):** * **Задача:** Надежное извлечение даты съемки из EXIF-данных фотографий. * **Решение:** Использована библиотека `Pillow` для парсинга метаданных. Реализован поиск по нескольким стандартным тегам (`DateTimeOriginal`, `DateTimeDigitized`) и корректная обработка случаев отсутствия данных для обеспечения отказоустойчивости. ### Общий принцип работы конвейера 1. **Пользовательский ввод:** Скрипт запускается и в интерактивном режиме помогает пользователю выбрать папку с данными. 2. **Обработка:** Система автоматически перебирает все файлы, извлекая метаданные, распознавая текст через **Yandex Vision API**, корректируя его с помощью **YandexGPT API**. 3. **Генерация отчета:** Все очищенные и структурированные данные записываются в готовый Excel-файл. ### Ключевые технологии: Python, XlsxWriter, Pillow, Requests (Yandex API), Git (для совместной работы).]]></summary></entry><entry><title type="html">Bachelor Thesis</title><link href="http://0.0.0.0:4000/2024/06/01/bachelor-thesis.html" rel="alternate" type="text/html" title="Bachelor Thesis" /><published>2024-06-01T00:00:00+00:00</published><updated>2024-06-01T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2024/06/01/bachelor-thesis</id><content type="html" xml:base="http://0.0.0.0:4000/2024/06/01/bachelor-thesis.html"><![CDATA[]]></content><author><name>Georgij Boldyrev</name><email>potap4800@gmail.com</email></author><summary type="html"><![CDATA[]]></summary></entry></feed>